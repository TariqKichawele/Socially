// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?  
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  comments  Comment[]
  likes     Like[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")
}

model Post {
  id        String   @id @default(cuid())
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  comments  Comment[]
  likes     Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  @@index([userId, postId])
  @@unique([userId, postId])
}

model Follows {
  createdAt DateTime @default(now())

  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String

  following    User @relation("following" ,fields: [followingId], references: [id], onDelete: Cascade)
  followingId  String

  @@index([followerId, followingId])
  @@id([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  read      Boolean @default(false)
  createdAt DateTime @default(now())

  user    User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  creator   User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String

  post      Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?

  comment      Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId    String?

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}